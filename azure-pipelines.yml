pr:
  - master
  - website-content

trigger:
  - master

variables:
  - group: fabric-variables

pool: 'Self Host Ubuntu'

jobs:
  - job: BuildTestLint
    workspace:
      clean: all
    steps:
      - template: .devops/templates/tools.yml

      - script: |
          yarn
        displayName: yarn

      - template: .devops/templates/pr-target-branch.yml

      - script: |
          yarn checkchange
        displayName: check change

      ## manually call this since lage is now used and it calls lint per package, not per repo
      - script: |
          yarn prelint
        displayName: do syncpack and no-tslint checks

      ## only do scoped builds with PRs
      - script: |
          yarn lage build test lint --verbose --no-cache --grouped --since $(target_branch)
        displayName: build, test, lint (pr, scoped)
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

      ## duplicated build step, but without --since flag for master CI builds
      - script: |
          yarn lage build test lint --verbose --no-cache --grouped
        displayName: build, test, lint (master)
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

  - job: Deploy
    workspace:
      clean: all
    variables:
      PR_DEPLOY: 1
    steps:
      - template: .devops/templates/tools.yml

      - script: |
          yarn
        displayName: yarn

      - template: .devops/templates/pr-target-branch.yml

      ## only do scoped bundle with PRs
      - script: |
          yarn lage bundle --verbose --no-cache --grouped --since $(target_branch)
        displayName: bundle (pr, scoped)
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

      ## duplicated for  master CI builds
      - script: |
          yarn lage bundle --verbose --no-cache --grouped
        displayName: bundle (master)
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

      ## This runs regardless of scope, the app will adapt to the scope as well
      - script: |
          yarn workspace @uifabric/pr-deploy-site generate:site
        displayName: generate PR Deploy Site

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: Build-PR-$(Build.BuildNumber)

      - task: AzureUpload@1
        displayName: Upload PR deploy site
        inputs:
          SourcePath: 'apps/pr-deploy-site/dist'
          azureSubscription: 'UI Fabric (bac044cf-49e1-4843-8dda-1ce9662606c8)'
          storage: fabricweb
          ContainerName: '$web'
          BlobPrefix: 'pr-deploy-site/$(Build.SourceBranch)'

  - job: ScreenerFluent
    workspace:
      clean: all
    steps:
      - template: .devops/templates/tools.yml

      - script: |
          yarn
        displayName: yarn

      - script: |
          NODE_ENV=production yarn test:fluentui:visual
        displayName: run FUI VR Test
        env:
          SCREENER_API_KEY: $(screener.key)

  - job: Screener
    workspace:
      clean: all
    steps:
      - template: .devops/templates/tools.yml

      - script: |
          yarn
        displayName: yarn

      - template: .devops/templates/pr-target-branch.yml

      - script: |
          yarn lage screener --scope vr-tests --debug --verbose --no-deps --no-cache --grouped
        displayName: run VR Test
        env:
          SCREENER_API_KEY: $(screener.key)
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'
